<?php
/**
 * Created by Vasiliy Ivanov
 * client: Bank SIAB
 * Version: 0.0.1
 * Date: 21.09.2018
 * email: vasilisko@gmail.com
 */

class eCommerce {
  var $result = array();
  var $config;
  var $log    = array();
  var $curlData;

  function __construct($configNew = array()) {
    $this->result['status'] = 'error';
    $this->config = array(
      'url'                    => '',
      'merchantid'             => '',
      'area'                   => 'development',  // development / production
      'logShow'                => FALSE,          // FALSE / write / print
      'logCurl'                => 'standart',     // standart / full
      'dirLog'                 => 'log',
      'dirCert'                => '',
      'data'                   => 'json',
      'curl_Ssl'               => FALSE,          // отправка сертификата
      'curl_sslVerifypeer'     => FALSE,
      'curl_timeout'           => '5',            // максимальное количество секунд для выполнения функций cURL.
      'curl_connectionTimeout' => '2'             // количество секунд ожидания при попытке подключения.
    );

    if (is_array($configNew) && count($configNew)) {
      foreach ($configNew as $key => $value) {
        $this->config[$key] = $value;
      }
    }

    $this->checkConfig();
  }

  function exec_CreateOrder() {
    $this->log[] = 'Выполняется CreateOrder';
    $header = array('Content-Type' => 'text/xml');

    $xml = array();
    $xml[] = '<TKKPG>';
    $xml[] = '<Request>';
    $xml[] = '<Operation>CreateOrder</Operation>';
    $xml[] = '<Language>EN</Language>';
    $xml[] = '<Order>';
    $xml[] = '<Merchant>' . $this->config['merchantid'] . '</Merchant>';
    $xml[] = '<OrderType>Purchase</OrderType>';
    $xml[] = '<Amount>' . $_POST['amount'] . '</Amount>';
    $xml[] = '<Currency>' . $_POST['currency'] . '</Currency>';
    $xml[] = '<Description>' . $_POST['description'] . '</Description>';
    $xml[] = '<ApproveURL>' . $_POST['approveurl'] . '</ApproveURL>';
    $xml[] = '<CancelURL>' . $_POST['cancelurl'] . '</CancelURL>';
    $xml[] = '<DeclineURL>' . $_POST['declineurl'] . '</DeclineURL>';
    $xml[] = '<AddParams>';
    $xml[] = '<OrigAmount/>';
    $xml[] = '<OrigCurrency/>';
    $xml[] = '</AddParams>';
    $xml[] = '</Order>';
    $xml[] = '</Request>';
    $xml[] = '</TKKPG>';

    $xmlSend = implode('', $xml);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $this->config['url']);
    curl_setopt($ch, CURLOPT_REFERER, $_POST['referer']);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $this->returnHeader($header));
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->config['curl_connectionTimeout']);
    curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['curl_timeout']);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $xmlSend);

    // TODO доделать работу с сертификатами
    if ($this->config['curl_Ssl']) {

      $certificateRequest = $this->config['dirCert'] . 'name.csr';  // CERTIFICATE REQUEST
      $certificate = $this->config['dirCert'] . '9902200976.crt';   // CERTIFICATE
      $privateKey = $this->config['dirCert'] . 'privatekey.key';    // PRIVATE KEY

      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); //  запретит проверки сертификата удаленного сервера
      curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); //  1 означает проверку существования имени, значение 2 - кроме того, и проверку соответствия имени хоста.
      curl_setopt($ch, CURLOPT_SSLKEY, $privateKey);
      curl_setopt($ch, CURLOPT_SSLCERT, $certificate);
      //curl_setopt($ch, CURLOPT_CAINFO, $certificateRequest);

      $this->log[] = 'Подключение сертификатов:';
      $this->log[] = 'CERTIFICATE: ' . $certificate;
      $this->log[] = 'PRIVATE KEY: ' . $privateKey;
    }

    $this->curlExecute($ch);

    if ($this->config['logCurl'] == 'full') {
      $this->log[] = 'XML';
      $this->log[] = '<textarea>' . $xmlSend . '</textarea>';
    }

    if ($this->curlData) {
      if ($this->curlData['errno'] || !$this->curlData['main']) {
        return $this->exec_Error();
      }

      $main = $this->convertXmlToArray($this->curlData['main']);

      $this->result['data'] = $main;
      $this->result['status'] = 'accept';
    }

    return $this->returnResult();
  }

  private function exec_Error() {
    $this->log[] = 'ОШИБКА exec_Error';
    $this->showLog();
    echo $this->returnResult($status = 'error');
    die();
  }

  private function curlExecute($ch) {
    $logExecute = array();
    $time['start'] = microtime(1);
    $result = array(
      'main'      => curl_exec($ch),
      'getinfo'   => curl_getinfo($ch),
      'errno'     => curl_errno($ch),
      'error'     => curl_error($ch),
      'status'    => 'access',
      'time_work' => '0'
    );
    curl_close($ch);
    $time['end'] = microtime(1);

    $result['time_work'] = round($time['end'] - $time['start'], 2);

    if (($result['errno'] || $result['getinfo']['http_code'] > 200)) {
      $result['status'] = 'error';
      $result['err_status'] = 2;
      if ($result['errno']) {
        $result['err_text'] = ' Error #' . $result['errno'] . ': ' . $result['error'] . '. ';
      }
      if ($result['getinfo']['http_code'] > 200) {
        $result['err_text'] = ' Http code: ' . $result['getinfo']['http_code'] . '. ';
      }
      $result['err_text'] .= ' Host: ' . $result['getinfo']['url'];
    }

    $logExecute[] = '- Status: <b>' . $result['status'] . '</b>. ';
    if ($result['errno']) {
      $logExecute[] = '- Error #' . $result['errno'] . ': ' . $result['error'] . '. ';
    }
    if ($result['getinfo']['http_code']) {
      $logExecute[] = '- Http code: ' . $result['getinfo']['http_code'] . '. ';
    }
    if ($result['time_work']) {
      $logExecute[] = '- Time script: ' . $result['time_work'] . ' sec. ';
    }
    if ($result['getinfo']['url']) {
      $logExecute[] = '- Url: ' . $result['getinfo']['url'] . '. ';
    }

    $this->curlData = $result;

    if ($this->config['logShow']) {
      $this->log[] = 'curl Execute';
      $this->log[] = '<br>' . implode('<br>', $logExecute);
    }

    if ($this->config['logCurl'] == 'full') {
      if (is_array($this->curlData) && count($this->curlData)) {
        $this->log[] = 'mainData:<br><textarea>' . print_r($this->curlData, TRUE) . '</textarea>';
      }
      if ($result['main']) {
        $this->log[] = 'main:<br><textarea>' . $result['main'] . '</textarea>';

      }
      if ($result['getinfo']) {
        $this->log[] = 'getinfo:<br><textarea>' . print_r($result['getinfo'], TRUE) . '</textarea>';
      }
      if ($this->curlData['error'] && $this->config['showError']) {
        $this->log[] = $this->curlData['error']['message'] . '(' . $this->curlData['error']['code'] . ')';
      }
    }

    if ($this->curlData['error']) {
      return FALSE;
    } else {
      return $result;
    }
  }

  private function convertXmlToArray($xml) {
    $xml ? $result = json_decode(json_encode(simplexml_load_string($xml)), TRUE) : $result = FALSE;
    return $result;
  }

  private function showLog() {
    if ($this->config['logShow']) {
      $this->result['log'] = implode('<br>', $this->log);
    }
  }

  private function returnResult($status = 'error') {
    $this->showLog();
    if ($this->config['data'] == 'json') {
      return $this->returnResultJson();
    } else {
      return $this->result;
    }

  }

  private function returnResultJson() {
    return json_encode($this->result, TRUE);
  }

  private function returnHeader($array) {
    $headerArray = array();
    if (is_array($array)) {
      foreach ($array as $sParam => $sVal) {
        $headerArray[] = $sParam . ': ' . $sVal;
      }
    }
    return $headerArray;
  }

  private function checkConfig() {
    $configCheck = TRUE;
    $textError[] = '<b color="red">Config error</b>. ';
    if (!$this->config['url']) {
      $configCheck = FALSE;
      $textError[] = 'Не указан <b>url</b>';
    }
    if (!$this->config['merchantid']) {
      $configCheck = FALSE;
      $textError[] = 'Не указан <b>merchantid</b>';
    }
    if ($this->config['curl_Ssl'] && (!$this->config['dirCert'] || !is_dir($this->config['dirCert']))) {
      $configCheck = FALSE;
      $textError[] = 'Не указан <b>dirCert</b> или путь не найден';
      $textError[] = 'dir: ' . $this->config['dirCert'];
    }

    if (!$configCheck) {
      foreach ($textError as $item) {
        $this->log[] = $item;
      }
      $this->exec_Error();
    }
  }
}